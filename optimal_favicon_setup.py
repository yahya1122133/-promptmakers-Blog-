#!/usr/bin/env python3

import os
import re
from pathlib import Path

def update_favicon_in_file(file_path):
    """Update favicon declarations in an HTML file with comprehensive setup."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Pattern to find existing favicon sections (various formats)
        patterns = [
            # Spaced HTML format
            r'    <!-- Favicon -->\s*\n(?:    <link[^>]*(?:favicon|icon)[^>]*>\s*\n)*',
            # Single favicon line (spaced)
            r'    <link rel="icon"[^>]*href="[^"]*favicon[^"]*"[^>]*>\s*\n',
            # Minified format
            r'<link rel="icon"[^>]*href="[^"]*favicon[^"]*"[^>]*>',
        ]
        
        # Optimal favicon setup
        optimal_favicon_spaced = """    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="/favicon.ico">
    <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon.icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon.icon.png">
    <link rel="icon" type="image/png" sizes="96x96" href="/images/favicon-96x96.png">
    <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon.png">
    <link rel="manifest" href="/site.webmanifest">
"""
        
        optimal_favicon_minified = '<link rel="icon" type="image/x-icon" href="/favicon.ico"><link rel="icon" type="image/png" sizes="16x16" href="/images/favicon.icon.png"><link rel="icon" type="image/png" sizes="32x32" href="/images/favicon.icon.png"><link rel="icon" type="image/png" sizes="96x96" href="/images/favicon-96x96.png"><link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon.png"><link rel="manifest" href="/site.webmanifest">'
        
        updated = False
        
        # Check if file is minified (no newlines in head section)
        head_section = re.search(r'<head[^>]*>.*?</head>', content, re.DOTALL)
        is_minified = head_section and '\n' not in head_section.group(0)[:200]
        
        for pattern in patterns:
            if re.search(pattern, content):
                if is_minified:
                    # For minified files, replace with minified favicon
                    updated_content = re.sub(pattern, optimal_favicon_minified, content, count=1)
                else:
                    # For formatted files, use spaced version
                    updated_content = re.sub(pattern, optimal_favicon_spaced, content, count=1)
                
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(updated_content)
                print(f"‚úÖ Updated favicon in: {file_path.name}")
                updated = True
                break
        
        if not updated:
            # If no existing favicon found, try to add after canonical or theme-color
            canonical_pattern = r'(<link rel="canonical"[^>]*>\s*\n)'
            theme_pattern = r'(<meta name="theme-color"[^>]*>\s*\n)'
            
            for insert_pattern in [canonical_pattern, theme_pattern]:
                if re.search(insert_pattern, content):
                    insertion = f'\\1\n{optimal_favicon_spaced}'
                    updated_content = re.sub(insert_pattern, insertion, content, count=1)
                    
                    with open(file_path, 'w', encoding='utf-8') as f:
                        f.write(updated_content)
                    print(f"‚úÖ Added favicon to: {file_path.name}")
                    updated = True
                    break
            
            if not updated:
                print(f"‚ö†Ô∏è  Could not find insertion point in: {file_path.name}")
        
        return updated
            
    except Exception as e:
        print(f"‚ùå Error updating {file_path}: {e}")
        return False

def main():
    """Apply optimal favicon setup to all HTML files."""
    dist_dir = Path("c:/Users/Yahya/Downloads/promptmakers-blog-dist/dist")
    
    if not dist_dir.exists():
        print(f"‚ùå Directory not found: {dist_dir}")
        return
    
    print("üöÄ Applying OPTIMAL FAVICON SETUP")
    print("=" * 60)
    print("üìã What this does:")
    print("‚Ä¢ Adds favicon.ico for legacy browser support")
    print("‚Ä¢ Adds 16x16, 32x32, 96x96 PNG icons for modern browsers")
    print("‚Ä¢ Adds Apple touch icon for iOS devices")
    print("‚Ä¢ Links to web manifest for PWA support")
    print("‚Ä¢ Ensures Google search results show your favicon")
    print("=" * 60)
    
    # Find all HTML files
    html_files = list(dist_dir.rglob("*.html"))
    
    print(f"\nüîç Found {len(html_files)} HTML files to update")
    print("-" * 40)
    
    updated_count = 0
    for html_file in html_files:
        if update_favicon_in_file(html_file):
            updated_count += 1
    
    print("-" * 40)
    print(f"‚úÖ Successfully updated {updated_count} files")
    print("\nüéØ FAVICON OPTIMIZATION COMPLETE!")
    print("\nüìà Expected Results:")
    print("‚Ä¢ Favicon will appear in Google search results")
    print("‚Ä¢ Works across all browsers (Chrome, Firefox, Safari, Edge)")
    print("‚Ä¢ Proper display on iOS when added to home screen")
    print("‚Ä¢ PWA-ready with web manifest support")
    print("‚Ä¢ Retina display optimization")
    
    print("\nüîç Files Used:")
    print("‚Ä¢ /favicon.ico (10.9 KB)")
    print("‚Ä¢ /images/favicon.icon.png (10.9 KB)")
    print("‚Ä¢ /images/favicon-96x96.png (10.9 KB)")
    print("‚Ä¢ /images/apple-touch-icon.png (35.9 KB)")
    print("‚Ä¢ /images/logo192.png (40.8 KB) - in manifest")
    print("‚Ä¢ /images/logo512.png (315.2 KB) - in manifest")
    
    print("\nüöÄ Ready to deploy! Your favicon issue should be resolved.")

if __name__ == "__main__":
    main()